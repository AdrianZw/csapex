#!/usr/bin/env python
PACKAGE = "robot_detection"
import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

key = gen.enum([ gen.const("K_BRISK", str_t, "BRISK", ""),
                 gen.const("K_SIFT",  str_t, "SIFT", ""),
                 gen.const("K_SURF",  str_t, "SURF", "") ,
                 gen.const("K_ORB",  str_t, "ORB", "") ,
                 gen.const("K_FAST",  str_t, "FAST", "") ,
                 gen.const("K_AGAST",  str_t, "AGAST", "") ,
                 gen.const("K_MSER",  str_t, "MSER", "") ,
                 gen.const("K_STAR",  str_t, "STAR", "") ,
                 gen.const("K_GFTT",  str_t, "GFTT", "") ],
                 "Keypoint Types")

descriptor = gen.enum([ gen.const("D_BRISK", str_t, "BRISK", ""),
                        gen.const("D_SIFT",  str_t, "SIFT", ""),
                        gen.const("D_SURF",  str_t, "SURF", "") ,
                        gen.const("D_BRIEF",  str_t, "BRIEF", "") ,
                        gen.const("D_ORB",  str_t, "ORB", "") ,
                        gen.const("D_U_BRISK",  str_t, "U_BRISK", ""),
                        gen.const("D_SU_BRISK",  str_t, "SU_BRISK", ""),
                        gen.const("D_S_BRISK",  str_t, "S_BRISK", "") ],
                        "Descriptor Types")

gen.add("keypoint_name", str_t, 0, "The keypoint type to use", "BRISK", edit_method=key)
gen.add("descriptor_name", str_t, 0, "The descriptor type to use", "BRISK", edit_method=descriptor)
gen.add("angle_offset", double_t, 0, "Yaw offset between the two IMUs", 0, 0, 360)
gen.add("sample_threshold", double_t, 0, "Threshold for new frames", 0, 6, 100)
gen.add("score_threshold", double_t, 0, "Threshold for scoring", 0.7, 0.0, 100000.0)
gen.add("octaves", int_t, 0, "No of octaves for features", 8, 0, 8)
gen.add("extractor_threshold", int_t, 0, "Extractor threshold", 50, 0, 100)
gen.add("matcher_threshold", double_t, 0, "Ratio between 1st and 2nd match", 0.8, 0.0, 1.0)
gen.add("min_points", int_t, 0, "Min no of points for matching", 3, 3, 20)
gen.add("use_pruning", bool_t, 0, "Use pruning after training", True)
gen.add("crop_test", bool_t, 0, "Crop test images", False)
gen.add("interactive", bool_t, 0, "Interactive Mode", True)

exit(gen.generate(PACKAGE, "robot_detection", "Global"))
