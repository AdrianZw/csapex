#ifndef ROI_MANAGER_H
#define ROI_MANAGER_H

/// COMPONENT
#include "roi.h"

/// PROJECT
#include <data/frame.h>

/// SYSTEM
#include <boost/function.hpp>

/// FORWARD DECLARATION
class RoiProvider;

/**
 * @brief The RoiManager class is a collection of RoiProviders
 */
class RoiManager
{
public:
    /**
     * @brief RoiManager
     */
    RoiManager();

    /**
     * @brief ~RoiManager
     */
    virtual ~RoiManager();

    /**
     * @brief newFrame signal that a new frame is analyzed
     * @param current_frame
     */
    void newFrame(Frame* current_frame);

    /**
     * @brief maintain take a provider and the resposibilty to destroy it when done
     * @param provider
     */
    void maintain(RoiProvider* provider);

    /**
     * @brief forEachRoi call the callback function for each roi generated by the collection
     * @param callback the function to call
     */
    void forEachRoi(boost::function<void(Roi)> callback);

    /**
     * @brief roiContainsTarget
     * @param frame
     * @param roi
     */
    void roiContainsTarget(const Roi& roi);

    /**
     * @brief setFrameSize setter for the maximum roi area
     * @param size
     */
    void setFrameSize(const cv::Rect& size);

private:
    Frame* current_frame_;
    std::vector<RoiProvider*> providers_;
};

#endif // ROI_MANAGER_H
